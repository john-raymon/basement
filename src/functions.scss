@import 'defaults';

/*
Strips units from given $number i.e. 10px -> 10
*/
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}


/*
If $value found in $string, return $string with $value replaced with
$replacement.
*/
@function str-replace($string, $value, $replacement: '') {
  $index: str-index($string, $value);

  @if $index {
    @return str-slice($string, 1, $index - 1)
      + $replacement + str-replace(
        str-slice(
          $string,
          $index + str-length($value)
        ),
        $value,
        $replacement
      );
  }

  @return $string;
}


/*
Strips units and replaces '.' with '_' for class name safety.
*/
@function format-unit($unit) {
  @if type-of($unit) == number {
    @return str-replace(
      str-replace('#{strip-units($unit)}', '0.', $decimal_deliminator),
      '.',
      $decimal_deliminator
    );
  } @else {
    @return $unit;
  }
}

/*
Casts a string to a number
*/
@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}
